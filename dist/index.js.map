{"version":3,"file":"index.js","sources":["../src/helpers/index.ts","../src/helpers/getDocumentsInArray.ts","../src/components/SelectButtons.tsx","../src/components/StatusBadge.tsx","../src/components/Feedback.tsx","../src/helpers/clientConfig.ts","../src/components/Duplicator.tsx","../src/components/DuplicatorQuery.tsx","../src/components/DuplicatorWrapper.tsx","../src/helpers/constants.ts","../src/components/ResetSecret.tsx","../src/context/ConfigProvider.tsx","../src/components/CrossDatasetDuplicator.tsx","../src/components/CrossDatasetDuplicatorAction.tsx","../src/actions/DuplicateToAction.tsx","../src/components/CrossDatasetDuplicatorTool.tsx","../src/tool/index.ts","../src/plugin.tsx"],"sourcesContent":["import {CSSProperties} from 'react'\n\nexport function createInitialMessage(docCount = 0, refsCount = 0): string {\n  const message = [\n    docCount === 1 ? `This Document contains` : `These ${docCount} Documents contain`,\n    refsCount === 1 ? `1 Reference.` : `${refsCount} References.`,\n    refsCount === 1 ? `That Document` : `Those Documents`,\n    `may have References too. If referenced Documents do not exist at the target Destination, this transaction will fail.`,\n  ]\n\n  return message.join(` `)\n}\n\nexport const stickyStyles = (isDarkMode = true): CSSProperties => ({\n  position: 'sticky',\n  top: 0,\n  zIndex: 100,\n  backgroundColor: isDarkMode ? `rgba(10,10,10,0.95)` : `rgba(255,255,255,0.95)`,\n})\n","import {extractWithPath} from '@sanity/mutator'\nimport {SanityClient, SanityDocument} from 'sanity'\nimport {PluginConfig} from '../types'\n\ntype OptionsBag = {\n  fetchIds: string[]\n  client: SanityClient\n  pluginConfig: PluginConfig\n  currentIds?: Set<string> | null\n  projection?: string\n}\n\n// Recursively fetch Documents from an array of _id's and their references\n// Heavy use of Set is to avoid recursively querying for id's already in the payload\nexport async function getDocumentsInArray(options: OptionsBag): Promise<SanityDocument[]> {\n  const {fetchIds, client, pluginConfig, currentIds, projection} = options\n  const collection: SanityDocument[] = []\n\n  // Find initial docs\n  const filter = ['_id in $fetchIds', pluginConfig.filter].filter(Boolean).join(' && ')\n  const query = `*[${filter}]${projection ?? ``}`\n  const data: SanityDocument[] = await client.fetch(query, {\n    fetchIds: fetchIds ?? [],\n  })\n\n  if (!data?.length) {\n    return []\n  }\n\n  const localCurrentIds = currentIds ?? new Set<string>()\n\n  // Find new ids in the returned data\n  // Unless we started with an empty set, get the _ids from the data\n  const newDataIds = new Set<string>(\n    data\n      .map((dataDoc) => dataDoc._id)\n      .filter((id) => (currentIds?.size ? !localCurrentIds.has(id) : Boolean(id)))\n  )\n\n  if (newDataIds.size) {\n    collection.push(...data)\n    // @ts-ignore\n    localCurrentIds.add(...newDataIds)\n\n    // Check new data for more references\n    await Promise.all(\n      data.map(async (doc) => {\n        const expr = `.._ref`\n        const references: string[] = extractWithPath(expr, doc).map((ref) => ref.value as string)\n\n        if (references.length) {\n          // Find references not already in the Collection\n          const newReferenceIds = new Set<string>(\n            references.filter((ref) => !localCurrentIds.has(ref))\n          )\n\n          if (newReferenceIds.size) {\n            // Recursive query for new documents\n            const referenceDocs = await getDocumentsInArray({\n              fetchIds: Array.from(newReferenceIds),\n              currentIds: localCurrentIds,\n              client,\n              pluginConfig,\n            })\n\n            if (referenceDocs?.length) {\n              collection.push(...referenceDocs)\n            }\n          }\n        }\n      })\n    )\n  }\n\n  // Create a unique array of objects from collection\n  // Set() wasn't working for unique id's ¯\\_(ツ)_/¯\n  const uniqueCollection = collection.filter(Boolean).reduce((acc: SanityDocument[], cur) => {\n    if (acc.some((doc) => doc._id === cur._id)) {\n      return acc\n    }\n\n    return [...acc, cur]\n  }, [])\n\n  return uniqueCollection\n}\n","import React, {useState, useEffect} from 'react'\nimport {Button, Card, Flex} from '@sanity/ui'\n\nimport {PayloadItem} from './Duplicator'\nimport {isAssetId} from '@sanity/asset-utils'\n\nconst buttons = [`All`, `None`, null, `New`, `Existing`, `Older`, null, `Documents`, `Assets`]\n\ntype Action = 'ALL' | 'NONE' | 'NEW' | 'EXISTING' | 'OLDER' | 'ASSETS' | 'DOCUMENTS'\n\ntype SelectButtonsProps = {\n  payload: PayloadItem[]\n  setPayload: Function\n}\n\nexport default function SelectButtons(props: SelectButtonsProps) {\n  const {payload, setPayload} = props\n  const [disabledActions, setDisabledActions] = useState<Action[]>([])\n\n  // Set intiial disabled button\n  useEffect(() => {\n    if (!disabledActions?.length && payload.every((item) => item.include)) {\n      setDisabledActions([`ALL`])\n    }\n  }, [disabledActions?.length, payload])\n\n  function handleSelectButton(action?: Action) {\n    if (!action || !payload.length) return\n\n    const newPayload = [...payload]\n\n    switch (action) {\n      case 'ALL':\n        newPayload.map((item) => (item.include = true))\n        break\n      case 'NONE':\n        newPayload.map((item) => (item.include = false))\n        break\n      case 'NEW':\n        newPayload.map((item) => (item.include = Boolean(item.status === 'CREATE')))\n        break\n      case 'EXISTING':\n        newPayload.map((item) => (item.include = Boolean(item.status === 'EXISTS')))\n        break\n      case 'OLDER':\n        newPayload.map((item) => (item.include = Boolean(item.status === 'OVERWRITE')))\n        break\n      case 'ASSETS':\n        newPayload.map((item) => (item.include = isAssetId(item.doc._id)))\n        break\n      case 'DOCUMENTS':\n        newPayload.map((item) => (item.include = !isAssetId(item.doc._id)))\n        break\n      default:\n        break\n    }\n\n    setDisabledActions([action])\n    setPayload(newPayload)\n  }\n\n  return (\n    <Card padding={1} radius={3} shadow={1}>\n      <Flex gap={2}>\n        {buttons.map((action, actionIndex) =>\n          action ? (\n            <Button\n              key={action}\n              fontSize={1}\n              mode=\"bleed\"\n              padding={2}\n              text={action}\n              disabled={disabledActions.includes(action.toUpperCase() as Action)}\n              onClick={() => handleSelectButton(action.toUpperCase() as Action)}\n            />\n          ) : (\n            // eslint-disable-next-line react/no-array-index-key\n            <Card key={`divider-${actionIndex}`} borderLeft />\n          )\n        )}\n      </Flex>\n    </Card>\n  )\n}\n","import React from 'react'\nimport {Box, Text, Badge, Tooltip} from '@sanity/ui'\nimport type {BadgeTone} from '@sanity/ui'\n\ntype StatusTones = {\n  EXISTS: BadgeTone\n  OVERWRITE: BadgeTone\n  UPDATE: BadgeTone\n  CREATE: BadgeTone\n  UNPUBLISHED: BadgeTone\n}\n\nconst documentTones: StatusTones = {\n  EXISTS: `primary`,\n  OVERWRITE: `critical`,\n  UPDATE: `caution`,\n  CREATE: `positive`,\n  UNPUBLISHED: `caution`,\n}\n\nconst assetTones: StatusTones = {\n  EXISTS: `critical`,\n  OVERWRITE: `critical`,\n  UPDATE: `critical`,\n  CREATE: `positive`,\n  UNPUBLISHED: `default`,\n}\n\nexport type MessageTypes = {\n  EXISTS: string\n  OVERWRITE: string\n  UPDATE: string\n  CREATE: string\n  UNPUBLISHED: string\n}\n\nconst documentMessages: MessageTypes = {\n  // Only happens once document is copied the first time, and _updatedAt is the same\n  EXISTS: `This document already exists at the Destination with the same ID with the same Updated time.`,\n  // Is true immediately after transaction as _updatedAt is updated by API after mutation\n  // Is also true if the document at the destination has been manually modified\n  // Presently, the plugin doesn't actually compare the two documents\n  OVERWRITE: `A newer version of this document exists at the Destination, and it will be overwritten with this version.`,\n  // Document at destination is older\n  UPDATE: `An older version of this document exists at the Destination, and it will be overwritten with this version.`,\n  // Document at destination doesn't exist\n  CREATE: `This document will be created at the destination.`,\n  UNPUBLISHED: `A Draft version of this Document exists in this Dataset, but only the Published version will be duplicated to the destination.`,\n}\n\nconst assetMessages: MessageTypes = {\n  EXISTS: `This Asset already exists at the Destination`,\n  OVERWRITE: `This Asset already exists at the Destination`,\n  UPDATE: `This Asset already exists at the Destination`,\n  CREATE: `This Asset does not yet exist at the Destination`,\n  UNPUBLISHED: ``,\n}\n\nconst assetStatus: MessageTypes = {\n  EXISTS: `RE-UPLOAD`,\n  OVERWRITE: `RE-UPLOAD`,\n  UPDATE: `RE-UPLOAD`,\n  CREATE: `UPLOAD`,\n  UNPUBLISHED: ``,\n}\n\ntype StatusBadgeProps = {\n  isAsset: boolean\n  status?: keyof MessageTypes\n}\n\nexport default function StatusBadge(props: StatusBadgeProps) {\n  const {status, isAsset} = props\n\n  if (!status) {\n    return null\n  }\n\n  const badgeTone = isAsset ? assetTones[status] : documentTones[status]\n\n  if (!badgeTone) {\n    return (\n      <Badge muted padding={2} fontSize={1} mode=\"outline\">\n        Checking...\n      </Badge>\n    )\n  }\n\n  const badgeText = isAsset ? assetMessages[status] : documentMessages[status]\n  const badgeStatus = isAsset ? assetStatus[status] : status\n\n  return (\n    <Tooltip\n      content={\n        <Box padding={3} style={{maxWidth: 200}}>\n          <Text size={1}>{badgeText}</Text>\n        </Box>\n      }\n      fallbackPlacements={['right', 'left']}\n      placement=\"top\"\n      portal\n    >\n      <Badge muted padding={2} fontSize={1} tone={badgeTone} mode=\"outline\">\n        {badgeStatus}\n      </Badge>\n    </Tooltip>\n  )\n}\n","import React from 'react'\nimport {Card, Text} from '@sanity/ui'\nimport type {BadgeTone} from '@sanity/ui'\n\ntype FeedbackProps = {\n  children?: React.ReactNode\n  tone?: BadgeTone\n}\n\nexport default function Feedback(props: FeedbackProps) {\n  const {children, tone = `caution`} = props\n\n  return (\n    <Card padding={3} radius={2} shadow={1} tone={tone}>\n      <Text size={1}>{children}</Text>\n    </Card>\n  )\n}\n","export const clientConfig = {apiVersion: `2021-05-19`}\n","/* eslint-disable react/jsx-no-bind */\nimport React, {useState, useEffect} from 'react'\nimport {\n  useClient,\n  Preview,\n  useSchema,\n  useWorkspaces,\n  WorkspaceSummary,\n  SanityDocument,\n} from 'sanity'\n// @ts-ignore\nimport mapLimit from 'async/mapLimit'\n// @ts-ignore\nimport asyncify from 'async/asyncify'\nimport {extractWithPath} from '@sanity/mutator'\nimport {dset} from 'dset'\nimport {\n  Card,\n  Container,\n  Text,\n  Box,\n  Button,\n  Label,\n  Stack,\n  Select,\n  Flex,\n  Checkbox,\n  CardTone,\n  useTheme,\n} from '@sanity/ui'\nimport {ArrowRightIcon, SearchIcon, LaunchIcon} from '@sanity/icons'\nimport {SanityAssetDocument} from '@sanity/client'\nimport {isAssetId, isSanityFileAsset} from '@sanity/asset-utils'\n\nimport {stickyStyles, createInitialMessage} from '../helpers'\nimport {getDocumentsInArray} from '../helpers/getDocumentsInArray'\nimport SelectButtons from './SelectButtons'\nimport StatusBadge, {MessageTypes} from './StatusBadge'\nimport Feedback from './Feedback'\nimport {clientConfig} from '../helpers/clientConfig'\nimport {PluginConfig} from '../types'\n\nexport type DuplicatorProps = {\n  docs: SanityDocument[]\n  // TODO: Find out if this is even used?\n  // draftIds: string[]\n  token: string\n  pluginConfig: PluginConfig\n  onDuplicated?: () => Promise<void>\n}\n\nexport type PayloadItem = {\n  doc: SanityDocument\n  include: boolean\n  status?: keyof MessageTypes\n  hasDraft?: boolean\n}\n\ntype WorkspaceOption = WorkspaceSummary & {\n  disabled: boolean\n}\n\ntype Message = {\n  text: string\n  tone: CardTone\n}\n\nexport default function Duplicator(props: DuplicatorProps) {\n  const {docs, token, pluginConfig, onDuplicated} = props\n  const isDarkMode = useTheme().sanity.color.dark\n\n  // Prepare origin (this Studio) client\n  const originClient = useClient(clientConfig)\n\n  const schema = useSchema()\n\n  // Create list of dataset options\n  // and set initial value of dropdown\n  const workspaces = useWorkspaces()\n  const workspacesOptions: WorkspaceOption[] = workspaces.map((workspace) => ({\n    ...workspace,\n    disabled: workspace.dataset === originClient.config().dataset,\n  }))\n\n  const [destination, setDestination] = useState<WorkspaceOption | null>(\n    workspaces.length ? workspacesOptions.find((space) => !space.disabled) ?? null : null\n  )\n  const [message, setMessage] = useState<Message | null>(null)\n  const [payload, setPayload] = useState<PayloadItem[]>([])\n\n  const [hasReferences, setHasReferences] = useState(false)\n  const [isDuplicating, setIsDuplicating] = useState(false)\n  const [isGathering, setIsGathering] = useState(false)\n  const [progress, setProgress] = useState<number[]>([0, 0])\n\n  // Check for References and update message\n  useEffect(() => {\n    const expr = `.._ref`\n    const initialRefs = []\n    const initialPayload: PayloadItem[] = []\n\n    docs.forEach((doc) => {\n      const refs = extractWithPath(expr, doc).map((ref) => ref.value)\n      initialRefs.push(...refs)\n      initialPayload.push({include: true, doc})\n    })\n\n    setPayload(initialPayload)\n\n    const docCount = docs.length\n    const refsCount = initialRefs.length\n\n    if (initialRefs.length) {\n      setHasReferences(true)\n\n      setMessage({\n        tone: `caution`,\n        text: createInitialMessage(docCount, refsCount),\n      })\n    }\n  }, [docs])\n\n  // Re-check payload on destination when value changes\n  // (On initial render + select change)\n  useEffect(() => {\n    updatePayloadStatuses()\n  }, [destination])\n\n  // Check if payload documents exist at destination\n  async function updatePayloadStatuses(newPayload: PayloadItem[] = []) {\n    const payloadActual = newPayload.length ? newPayload : payload\n\n    if (!payloadActual.length || !destination?.name) {\n      return\n    }\n\n    const payloadIds = payloadActual.map(({doc}) => doc._id)\n    const destinationClient = originClient.withConfig({\n      ...clientConfig,\n      dataset: destination.dataset,\n      projectId: destination.projectId,\n    })\n    const destinationData: SanityDocument[] = await destinationClient.fetch(\n      `*[_id in $payloadIds]{ _id, _updatedAt }`,\n      {payloadIds}\n    )\n\n    const updatedPayload = payloadActual.map((item) => {\n      const existingDoc = destinationData.find((doc) => doc._id === item.doc._id)\n\n      if (existingDoc?._updatedAt && item?.doc?._updatedAt) {\n        if (existingDoc._updatedAt === item.doc._updatedAt) {\n          // Exact same document exists at destination\n          // We don't compare by _rev because that is updated in a transaction\n          item.status = `EXISTS`\n        } else if (existingDoc._updatedAt && item.doc._updatedAt) {\n          item.status =\n            new Date(existingDoc._updatedAt) > new Date(item.doc._updatedAt)\n              ? // Document at destination is newer\n                `OVERWRITE`\n              : // Document at destination is older\n                `UPDATE`\n        }\n      } else {\n        item.status = 'CREATE'\n      }\n\n      return item\n    })\n\n    setPayload(updatedPayload)\n  }\n\n  function handleCheckbox(_id: string) {\n    const updatedPayload = payload.map((item) => {\n      if (item.doc._id === _id) {\n        item.include = !item.include\n      }\n\n      return item\n    })\n\n    setPayload(updatedPayload)\n  }\n\n  // Find and recursively follow references beginning with this document\n  async function handleReferences() {\n    setIsGathering(true)\n    const docIds = docs.map((doc) => doc._id)\n\n    const payloadDocs = await getDocumentsInArray({\n      fetchIds: docIds,\n      client: originClient,\n      pluginConfig,\n    })\n    const draftDocs = await getDocumentsInArray({\n      fetchIds: docIds.map((id) => `drafts.${id}`),\n      client: originClient,\n      projection: `{_id}`,\n      pluginConfig,\n    })\n    const draftDocsIds = new Set(draftDocs.map(({_id}) => _id))\n\n    // Shape it up\n    const payloadShaped = payloadDocs.map((doc) => ({\n      doc,\n      // Include this in the transaction?\n      include: true,\n      // Does it exist at the destination?\n      status: undefined,\n      // Does it have any drafts?\n      hasDraft: draftDocsIds.has(`drafts.${doc._id}`),\n    }))\n\n    setPayload(payloadShaped)\n    updatePayloadStatuses(payloadShaped)\n    setIsGathering(false)\n  }\n\n  // Duplicate payload to destination dataset\n  async function handleDuplicate() {\n    if (!destination) {\n      return\n    }\n\n    setIsDuplicating(true)\n\n    const assetsCount = payload.filter(({doc, include}) => include && isAssetId(doc._id)).length\n    let currentProgress = 0\n    setProgress([currentProgress, assetsCount])\n\n    setMessage({text: 'Duplicating...', tone: `default`})\n\n    const destinationClient = originClient.withConfig({\n      ...clientConfig,\n      dataset: destination.dataset,\n      projectId: destination.projectId,\n    })\n\n    const transactionDocs: SanityDocument[] = []\n    const svgMaps: {old: string; new: string}[] = []\n\n    // Upload assets and then add to transaction\n    async function fetchDoc(doc: SanityAssetDocument) {\n      if (isAssetId(doc._id)) {\n        // Download and upload asset\n        // Get the *original* image with this dlRaw param to create the same determenistic _id\n        const typeIsFile = isSanityFileAsset(doc)\n        const downloadUrl = typeIsFile ? doc.url : `${doc.url}?dlRaw=true`\n        const downloadConfig = typeIsFile ? {} : {headers: {Authorization: `Bearer ${token}`}}\n\n        await fetch(downloadUrl, downloadConfig).then(async (res) => {\n          const assetData = await res.blob()\n\n          const options = {filename: doc.originalFilename}\n          const assetDoc = await destinationClient.assets.upload(\n            typeIsFile ? `file` : `image`,\n            assetData,\n            options\n          )\n\n          // SVG _id's need remapping before transaction\n          if (doc?.extension === 'svg') {\n            svgMaps.push({old: doc._id, new: assetDoc._id})\n          }\n\n          transactionDocs.push(assetDoc)\n        })\n\n        currentProgress += 1\n        setMessage({\n          text: `Duplicating ${currentProgress}/${assetsCount} ${\n            assetsCount === 1 ? `Assets` : `Assets`\n          }`,\n          tone: 'default',\n        })\n\n        return setProgress([currentProgress, assetsCount])\n      }\n\n      return transactionDocs.push(doc)\n    }\n\n    // Promises are limited to three at once\n    const result = new Promise((resolve, reject) => {\n      const payloadIncludedDocs = payload.filter((item) => item.include).map((item) => item.doc)\n\n      mapLimit(payloadIncludedDocs, 3, asyncify(fetchDoc), (err: Error) => {\n        if (err) {\n          setIsDuplicating(false)\n          setMessage({tone: 'critical', text: `Duplication Failed`})\n          console.error(err)\n          reject(new Error('Duplication Failed'))\n        }\n\n        // @ts-ignore\n        resolve()\n      })\n    })\n\n    await result\n\n    // Remap SVG references to new _id's\n    const transactionDocsMapped = transactionDocs.map((doc) => {\n      const expr = `.._ref`\n      const references = extractWithPath(expr, doc)\n\n      if (!references.length) {\n        return doc\n      }\n\n      // For every found _ref, search for an SVG asset _id and update\n      references.forEach((ref) => {\n        const newRefValue = svgMaps.find((asset) => asset.old === ref.value)?.new\n\n        if (newRefValue) {\n          const refPath = ref.path.join('.')\n\n          dset(doc, refPath, newRefValue)\n        }\n      })\n\n      return doc\n    })\n\n    // Create transaction\n    const transaction = destinationClient.transaction()\n\n    transactionDocsMapped.forEach((doc) => {\n      transaction.createOrReplace(doc)\n    })\n\n    await transaction\n      .commit()\n      .then((res) => {\n        setMessage({tone: 'positive', text: 'Duplication complete!'})\n\n        updatePayloadStatuses()\n      })\n      .catch((err) => {\n        setMessage({tone: 'critical', text: err.details.description})\n      })\n\n    setIsDuplicating(false)\n    setProgress([0, 0])\n    if (onDuplicated) {\n      try {\n        await onDuplicated()\n      } catch (error) {\n        setMessage({tone: 'critical', text: `Error in onDuplicated hook: ${error}`})\n      }\n    }\n  }\n\n  function handleChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    if (!workspacesOptions.length) {\n      return\n    }\n\n    const targeted = workspacesOptions.find((space) => space.name === e.currentTarget.value)\n\n    if (targeted) {\n      setDestination(targeted)\n    }\n  }\n\n  const payloadCount = payload.length\n  const firstSvgIndex = payload.findIndex(({doc}) => doc.extension === 'svg')\n  const selectedDocumentsCount = payload.filter(\n    (item) => item.include && !isAssetId(item.doc._id)\n  ).length\n  const selectedAssetsCount = payload.filter(\n    (item) => item.include && isAssetId(item.doc._id)\n  ).length\n  const selectedTotal = selectedDocumentsCount + selectedAssetsCount\n  const destinationTitle = destination?.title ?? destination?.name\n  const hasMultipleProjectIds =\n    new Set(workspacesOptions.map((space) => space?.projectId).filter(Boolean)).size > 1\n\n  const headingText = [selectedTotal, `/`, payloadCount, `Documents and Assets selected`].join(` `)\n\n  const buttonText = React.useMemo(() => {\n    const text = [`Duplicate`]\n\n    if (selectedDocumentsCount > 1) {\n      text.push(\n        String(selectedDocumentsCount),\n        selectedDocumentsCount === 1 ? `Document` : `Documents`\n      )\n    }\n\n    if (selectedAssetsCount > 1) {\n      text.push(`and`, String(selectedAssetsCount), selectedAssetsCount === 1 ? `Asset` : `Assets`)\n    }\n\n    if (originClient.config().projectId !== destination?.projectId) {\n      text.push(`between Projects`)\n    }\n\n    text.push(`to`, String(destinationTitle))\n\n    return text.join(` `)\n  }, [\n    selectedDocumentsCount,\n    selectedAssetsCount,\n    originClient,\n    destination?.projectId,\n    destinationTitle,\n  ])\n\n  if (workspacesOptions.length < 2) {\n    return (\n      <Feedback tone=\"critical\">\n        <code>sanity.config.ts</code> must contain at least two Workspaces to use this plugin.\n      </Feedback>\n    )\n  }\n\n  return (\n    <Container width={1}>\n      <Card border>\n        <Stack>\n          <>\n            <Card borderBottom padding={4} style={stickyStyles(isDarkMode)}>\n              <Stack space={4}>\n                <Flex gap={3}>\n                  <Stack style={{flex: 1}} space={3}>\n                    <Label>Duplicate from</Label>\n                    <Select\n                      readOnly\n                      value={workspacesOptions.find((space) => space.disabled)?.name}\n                    >\n                      {workspacesOptions\n                        .filter((space) => space.disabled)\n                        .map((space) => (\n                          <option key={space.name} value={space.name} disabled={space.disabled}>\n                            {space.title ?? space.name}\n                            {hasMultipleProjectIds ? ` (${space.projectId})` : ``}\n                          </option>\n                        ))}\n                    </Select>\n                  </Stack>\n                  <Box padding={4} paddingTop={5} paddingBottom={0}>\n                    <Text size={3}>\n                      <ArrowRightIcon />\n                    </Text>\n                  </Box>\n                  <Stack style={{flex: 1}} space={3}>\n                    <Label>To Destination</Label>\n                    <Select onChange={handleChange}>\n                      {workspacesOptions.map((space) => (\n                        <option key={space.name} value={space.name} disabled={space.disabled}>\n                          {space.title ?? space.name}\n                          {hasMultipleProjectIds ? ` (${space.projectId})` : ``}\n                          {space.disabled ? ` (Current)` : ``}\n                        </option>\n                      ))}\n                    </Select>\n                  </Stack>\n                </Flex>\n\n                {isDuplicating && (\n                  <Card border radius={2}>\n                    <Card\n                      style={{\n                        width: '100%',\n                        transform: `scaleX(${progress[0] / progress[1]})`,\n                        transformOrigin: 'left',\n                        transition: 'transform .2s ease',\n                        boxSizing: 'border-box',\n                      }}\n                      padding={1}\n                      tone=\"positive\"\n                    />\n                  </Card>\n                )}\n                {payload.length > 0 && (\n                  <>\n                    <Label>{headingText}</Label>\n                    <SelectButtons payload={payload} setPayload={setPayload} />\n                  </>\n                )}\n              </Stack>\n            </Card>\n            {message && (\n              <Box paddingX={4} paddingTop={4}>\n                <Card padding={3} radius={2} shadow={1} tone={message.tone}>\n                  <Text size={1}>{message.text}</Text>\n                </Card>\n              </Box>\n            )}\n            {payload.length > 0 && (\n              <Stack padding={4} space={3}>\n                {payload.map(({doc, include, status, hasDraft}, index) => {\n                  const schemaType = schema.get(doc._type)\n\n                  return (\n                    <React.Fragment key={doc._id}>\n                      <Flex align=\"center\">\n                        <Checkbox checked={include} onChange={() => handleCheckbox(doc._id)} />\n                        <Box flex={1} paddingX={3}>\n                          {schemaType ? (\n                            <Preview value={doc} schemaType={schemaType} />\n                          ) : (\n                            <Card tone=\"caution\">Invalid schema type</Card>\n                          )}\n                        </Box>\n                        <Flex align=\"center\" gap={2}>\n                          {hasDraft ? <StatusBadge status=\"UNPUBLISHED\" isAsset={false} /> : null}\n                          <StatusBadge status={status} isAsset={isAssetId(doc._id)} />\n                        </Flex>\n                      </Flex>\n                      {doc?.extension === 'svg' && index === firstSvgIndex && (\n                        <Card padding={3} radius={2} shadow={1} tone=\"caution\">\n                          <Text size={1}>\n                            Due to how SVGs are sanitized after first uploaded, duplicated SVG\n                            assets may have new <code>_id</code>'s at the destination. The newly\n                            generated <code>_id</code> will be the same in each duplication, but it\n                            will never be the same <code>_id</code> as the first time this Asset was\n                            uploaded. References to the asset will be updated to use the new{' '}\n                            <code>_id</code>.\n                          </Text>\n                        </Card>\n                      )}\n                    </React.Fragment>\n                  )\n                })}\n              </Stack>\n            )}\n            <Stack space={2} padding={4} paddingTop={0}>\n              {hasReferences && (\n                <Button\n                  fontSize={2}\n                  padding={4}\n                  tone=\"positive\"\n                  mode=\"ghost\"\n                  icon={SearchIcon}\n                  onClick={handleReferences}\n                  text=\"Gather References\"\n                  disabled={isDuplicating || !selectedTotal || isGathering}\n                />\n              )}\n              <Button\n                fontSize={2}\n                padding={4}\n                tone=\"positive\"\n                icon={LaunchIcon}\n                onClick={handleDuplicate}\n                text={buttonText}\n                disabled={isDuplicating || !selectedTotal || isGathering}\n              />\n            </Stack>\n          </>\n        </Stack>\n      </Card>\n    </Container>\n  )\n}\n","import React, {useEffect, useState} from 'react'\nimport {Button, Stack, Box, Label, Text, Card, Flex, Grid, Container, TextInput} from '@sanity/ui'\nimport {useSchema, useClient, SanityDocument} from 'sanity'\n\nimport Duplicator from './Duplicator'\nimport {clientConfig} from '../helpers/clientConfig'\nimport {PluginConfig} from '../types'\n\ntype DuplicatorQueryProps = {\n  token: string\n  pluginConfig: PluginConfig\n}\n\ntype InitialData = {\n  docs: SanityDocument[]\n  // draftIds: string[]\n}\n\nexport default function DuplicatorQuery(props: DuplicatorQueryProps) {\n  const {token, pluginConfig} = props\n\n  const originClient = useClient(clientConfig)\n\n  const schema = useSchema()\n  const schemaTypes = schema.getTypeNames()\n\n  const [value, setValue] = useState(``)\n  const [initialData, setInitialData] = useState<InitialData>({\n    docs: [],\n    // draftIds: []\n  })\n\n  function handleSubmit(e?: any) {\n    if (e) e.preventDefault()\n\n    originClient\n      .fetch(value)\n      .then((res: SanityDocument[]) => {\n        // Ensure queried docs are registered to the schema\n        const registeredAndPublishedDocs = res.length\n          ? res\n              .filter((doc) => schemaTypes.includes(doc._type))\n              .filter((doc) => !doc._id.startsWith(`drafts.`))\n          : []\n        // const initialDraftIds = res.length\n        //   ? res.filter((doc) => doc._id.startsWith(`drafts.`)).map((doc) => doc._id)\n        //   : []\n\n        setInitialData({\n          docs: registeredAndPublishedDocs,\n          // draftIds: initialDraftIds\n        })\n      })\n      .catch((err) => console.error(err))\n  }\n\n  // Auto-load initial textinput value\n  useEffect(() => {\n    if (!initialData.docs?.length && value) {\n      handleSubmit()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <Container width={[1, 1, 1, 3]} padding={[0, 0, 0, 5]}>\n      <Grid columns={[1, 1, 1, 2]} gap={[1, 1, 1, 4]}>\n        <Box padding={[2, 2, 2, 0]}>\n          <Card padding={4} radius={3} border>\n            <Stack space={4}>\n              <Box>\n                <Label>Initial Documents Query</Label>\n              </Box>\n              <Box>\n                <Text>\n                  Start with a valid GROQ query to load initial documents. The query will need to\n                  return an Array of Objects. Drafts will be removed from the results.\n                </Text>\n              </Box>\n              <form onSubmit={handleSubmit}>\n                <Flex>\n                  <Box flex={1} paddingRight={2}>\n                    <TextInput\n                      style={{fontFamily: 'monospace'}}\n                      fontSize={2}\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onChange={(event) => setValue(event.currentTarget.value)}\n                      padding={4}\n                      placeholder={`*[_type == \"article\"]`}\n                      value={value ?? ``}\n                    />\n                  </Box>\n                  <Button\n                    padding={2}\n                    paddingX={4}\n                    tone=\"primary\"\n                    onClick={handleSubmit}\n                    text=\"Query\"\n                    disabled={!value}\n                  />\n                </Flex>\n              </form>\n            </Stack>\n          </Card>\n        </Box>\n        {!initialData.docs?.length ||\n          (initialData.docs.length < 1 && (\n            <Container width={1}>\n              <Card padding={5}>\n                {value\n                  ? `No Documents registered to the Schema match this query`\n                  : `Start with a valid GROQ query`}\n              </Card>\n            </Container>\n          ))}\n        {initialData.docs?.length > 0 && (\n          <Duplicator\n            docs={initialData.docs}\n            // draftIds={initialData.draftIds}\n            token={token}\n            pluginConfig={pluginConfig}\n          />\n        )}\n      </Grid>\n    </Container>\n  )\n}\n","import React, {useState, useEffect} from 'react'\nimport {Grid, Card, Container, Button} from '@sanity/ui'\nimport {SanityDocument, useClient} from 'sanity'\n\nimport type {DuplicatorProps} from './Duplicator'\nimport Duplicator from './Duplicator'\n\nexport default function DuplicatorWrapper(props: DuplicatorProps) {\n  const {docs, token, pluginConfig, onDuplicated} = props\n  const [inbound, setInbound] = useState<SanityDocument[]>([])\n  const {follow = []} = pluginConfig\n\n  // Make the first mode the default if there's only one\n  const [mode, setMode] = useState<'inbound' | 'outbound'>(\n    follow.length === 1 ? follow[0] : `outbound`\n  )\n  const client = useClient()\n\n  // \"Inbound\" will start with all documents that reference the first one\n  // And then you can gather \"Outbound\" references thereafter\n  useEffect(() => {\n    ;(async () => {\n      if (follow.includes(`inbound`)) {\n        const inboundReferences = await client.fetch(`*[references($id)]`, {id: docs[0]._id})\n        setInbound([...props.docs, ...inboundReferences])\n      }\n    })()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <Container>\n      {follow.length > 1 && (follow.includes(`inbound`) || follow.includes(`outbound`)) ? (\n        <Card paddingX={4} paddingBottom={4} marginBottom={4} borderBottom>\n          <Grid columns={2} gap={4}>\n            {follow.includes(`outbound`) ? (\n              <Button\n                mode=\"ghost\"\n                tone=\"primary\"\n                selected={mode === 'outbound'}\n                onClick={() => setMode('outbound')}\n                text=\"Outbound\"\n              />\n            ) : null}\n            {follow.includes(`inbound`) ? (\n              <Button\n                mode=\"ghost\"\n                tone=\"primary\"\n                selected={mode === 'inbound'}\n                onClick={() => setMode('inbound')}\n                disabled={inbound.length === 0}\n                text={inbound.length > 0 ? `Inbound (${inbound.length})` : 'No inbound references'}\n              />\n            ) : null}\n          </Grid>\n        </Card>\n      ) : null}\n      <Duplicator\n        docs={mode === 'outbound' ? docs : inbound}\n        token={token}\n        // draftIds={[]}\n        pluginConfig={pluginConfig}\n        onDuplicated={onDuplicated}\n      />\n    </Container>\n  )\n}\n","import {PluginConfig} from '../types'\n\nexport const SECRET_NAMESPACE = `CrossDatasetDuplicator`\n\nexport const DEFAULT_CONFIG: PluginConfig = {\n  tool: true,\n  types: [],\n  filter: '',\n  follow: ['outbound'],\n}\n","import React from 'react'\nimport {useClient} from 'sanity'\nimport {Button, Flex} from '@sanity/ui'\n\nimport {clientConfig} from '../helpers/clientConfig'\nimport {SECRET_NAMESPACE} from '../helpers/constants'\n\nexport default function ResetSecret() {\n  const client = useClient(clientConfig)\n\n  const handleClick = React.useCallback(() => {\n    client.delete({query: `*[_id == \"secrets.${SECRET_NAMESPACE}\"]`})\n  }, [client])\n\n  return (\n    <Flex align=\"center\" justify=\"flex-end\" paddingX={[2, 2, 2, 5]} paddingY={5}>\n      <Button\n        text=\"Reset Secret\"\n        onClick={handleClick}\n        mode=\"ghost\"\n        tone=\"critical\"\n        fontSize={1}\n        padding={2}\n      />\n    </Flex>\n  )\n}\n","import React, {useContext} from 'react'\nimport {createContext} from 'react'\nimport {LayoutProps} from 'sanity'\n\nimport {DEFAULT_CONFIG} from '../helpers/constants'\nimport {PluginConfig} from '../types'\n\nconst CrossDatasetDuplicatorContext = createContext(DEFAULT_CONFIG)\n\ntype ConfigProviderProps = LayoutProps & {pluginConfig: PluginConfig}\n\n/**\n * Plugin config context hook from the Cross Dataset Duplicator plugin\n * @public\n */\nexport function useCrossDatasetDuplicatorConfig() {\n  const pluginConfig = useContext(CrossDatasetDuplicatorContext)\n\n  return pluginConfig\n}\n\nexport function ConfigProvider(props: ConfigProviderProps) {\n  const {pluginConfig, ...rest} = props\n\n  return (\n    <CrossDatasetDuplicatorContext.Provider value={pluginConfig}>\n      {props.renderDefault(rest)}\n    </CrossDatasetDuplicatorContext.Provider>\n  )\n}\n","import {useEffect, useState} from 'react'\nimport {useSecrets, SettingsView} from '@sanity/studio-secrets'\nimport {Flex, Box, Spinner} from '@sanity/ui'\nimport {SanityDocument} from 'sanity'\n\nimport DuplicatorQuery from './DuplicatorQuery'\nimport DuplicatorWrapper from './DuplicatorWrapper'\nimport ResetSecret from './ResetSecret'\nimport Feedback from './Feedback'\nimport {SECRET_NAMESPACE} from '../helpers/constants'\nimport {useCrossDatasetDuplicatorConfig} from '../context/ConfigProvider'\n\n// Check for auth secret (required for asset uploads)\nconst secretConfigKeys = [\n  {\n    key: 'bearerToken',\n    title:\n      'An API token with Viewer permissions is required to duplicate the original files of assets, and will be used for all Duplications. Create one at sanity.io/manage',\n    description: '',\n  },\n]\n\ntype Secrets = {\n  bearerToken?: string\n}\n\ntype CrossDatasetDuplicatorProps = {\n  mode: 'tool' | 'action'\n  docs: SanityDocument[]\n  onDuplicated?: () => Promise<void>\n}\n\nexport default function CrossDatasetDuplicator(props: CrossDatasetDuplicatorProps) {\n  const {mode = `tool`, docs = [], onDuplicated} = props ?? {}\n  const pluginConfig = useCrossDatasetDuplicatorConfig()\n\n  const {loading, secrets} = useSecrets<Secrets>(SECRET_NAMESPACE)\n  const [showSecretsPrompt, setShowSecretsPrompt] = useState(false)\n\n  useEffect(() => {\n    if (secrets) {\n      setShowSecretsPrompt(!secrets?.bearerToken)\n    }\n  }, [secrets])\n\n  if (loading) {\n    return (\n      <Flex justify=\"center\" align=\"center\">\n        <Box padding={5}>\n          <Spinner />\n        </Box>\n      </Flex>\n    )\n  }\n\n  if ((!loading && showSecretsPrompt) || !secrets?.bearerToken) {\n    return (\n      <SettingsView\n        title=\"Token Required\"\n        namespace={SECRET_NAMESPACE}\n        keys={secretConfigKeys}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClose={() => setShowSecretsPrompt(false)}\n      />\n    )\n  }\n\n  if (mode === 'tool' && pluginConfig) {\n    return (\n      <>\n        <DuplicatorQuery token={secrets?.bearerToken} pluginConfig={pluginConfig} />\n        <ResetSecret />\n      </>\n    )\n  }\n\n  if (!docs?.length) {\n    return <Feedback>No docs passed into Duplicator Tool</Feedback>\n  }\n\n  if (!pluginConfig) {\n    return <Feedback>No plugin config</Feedback>\n  }\n\n  return (\n    <DuplicatorWrapper\n      docs={docs}\n      token={secrets?.bearerToken}\n      pluginConfig={pluginConfig}\n      onDuplicated={onDuplicated}\n    />\n  )\n}\n","import {CrossDatasetDuplicatorActionProps} from '../types'\n\nimport CrossDatasetDuplicator from './CrossDatasetDuplicator'\n\n/**\n * Component to perform a migration from the Cross Dataset Duplicator plugin\n * @public\n */\nexport function CrossDatasetDuplicatorAction(props: CrossDatasetDuplicatorActionProps) {\n  const {docs = [], onDuplicated} = props\n\n  return <CrossDatasetDuplicator mode=\"action\" docs={docs} onDuplicated={onDuplicated} />\n}\n","import React, {useState} from 'react'\nimport {LaunchIcon} from '@sanity/icons'\nimport {DocumentActionProps} from 'sanity'\n\nimport {CrossDatasetDuplicatorAction} from '../components/CrossDatasetDuplicatorAction'\n\n/**\n * Document action from the Cross Dataset Duplicator plugin\n * @public\n */\nexport const DuplicateToAction = (props: DocumentActionProps) => {\n  const {draft, published, onComplete} = props\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  return {\n    disabled: draft,\n    title: draft ? `Document must be Published to begin` : null,\n    label: 'Duplicate to...',\n    dialog: dialogOpen &&\n      published && {\n        type: 'modal',\n        title: 'Cross Dataset Duplicator',\n        content: <CrossDatasetDuplicatorAction docs={[published]} />,\n        onClose: () => {\n          onComplete()\n          setDialogOpen(false)\n        },\n      },\n    onHandle: () => setDialogOpen(true),\n    icon: LaunchIcon,\n  }\n}\n\nDuplicateToAction.action = 'duplicateTo'\n","import React from 'react'\nimport {SanityDocument, Tool} from 'sanity'\n\nimport CrossDatasetDuplicator from './CrossDatasetDuplicator'\n\nexport type MultiToolConfig = {\n  docs: SanityDocument[]\n}\n\ntype CrossDatasetDuplicatorProps = {\n  tool: Tool<MultiToolConfig>\n}\n\nexport function CrossDatasetDuplicatorTool(props: CrossDatasetDuplicatorProps) {\n  const {docs = []} = props.tool.options ?? {}\n\n  return <CrossDatasetDuplicator mode=\"tool\" docs={docs} />\n}\n","import type {Tool} from 'sanity'\nimport {LaunchIcon} from '@sanity/icons'\n\nimport {CrossDatasetDuplicatorTool, MultiToolConfig} from '../components/CrossDatasetDuplicatorTool'\n\nexport const crossDatasetDuplicatorTool = (): Tool<MultiToolConfig> => ({\n  title: 'Duplicator',\n  name: 'duplicator',\n  icon: LaunchIcon,\n  component: CrossDatasetDuplicatorTool,\n  options: {\n    docs: [],\n  },\n})\n","import {definePlugin} from 'sanity'\n\nimport {DuplicateToAction} from './actions/DuplicateToAction'\nimport {ConfigProvider} from './context/ConfigProvider'\nimport {DEFAULT_CONFIG} from './helpers/constants'\nimport {crossDatasetDuplicatorTool} from './tool'\nimport {PluginConfig} from './types'\n\n/**\n * Plugin: Cross Dataset Duplicator\n * @public\n */\nexport const crossDatasetDuplicator = definePlugin<PluginConfig | void>((config = {}) => {\n  const pluginConfig = {...DEFAULT_CONFIG, ...config}\n  const {types} = pluginConfig\n\n  return {\n    name: '@sanity/cross-dataset-duplicator',\n    tools: (prev) => (pluginConfig.tool ? [...prev, crossDatasetDuplicatorTool()] : prev),\n    studio: {\n      components: {\n        layout: (props) => ConfigProvider({...props, pluginConfig}),\n      },\n    },\n    document: {\n      actions: (prev, {schemaType}) => {\n        return types && types.includes(schemaType) ? [...prev, DuplicateToAction] : prev\n      },\n    },\n  }\n})\n"],"names":["createInitialMessage","docCount","arguments","length","undefined","refsCount","message","concat","join","stickyStyles","isDarkMode","position","top","zIndex","backgroundColor","getDocumentsInArray","options","fetchIds","client","pluginConfig","currentIds","projection","collection","filter","Boolean","query","data","fetch","localCurrentIds","Set","newDataIds","map","dataDoc","_id","id","size","has","push","add","Promise","all","doc","expr","references","extractWithPath","ref","value","newReferenceIds","referenceDocs","Array","from","uniqueCollection","reduce","acc","cur","some","buttons","SelectButtons","props","payload","setPayload","disabledActions","setDisabledActions","useState","useEffect","every","item","include","handleSelectButton","action","newPayload","status","isAssetId","jsx","Card","padding","radius","shadow","children","Flex","gap","actionIndex","Button","fontSize","mode","text","disabled","includes","toUpperCase","onClick","borderLeft","documentTones","EXISTS","OVERWRITE","UPDATE","CREATE","UNPUBLISHED","assetTones","documentMessages","assetMessages","assetStatus","StatusBadge","isAsset","badgeTone","Badge","muted","badgeText","badgeStatus","Tooltip","content","Box","style","maxWidth","Text","fallbackPlacements","placement","portal","tone","Feedback","clientConfig","apiVersion","Duplicator","_a","_b","_c","docs","token","onDuplicated","useTheme","sanity","color","dark","originClient","useClient","schema","useSchema","workspaces","useWorkspaces","workspacesOptions","workspace","dataset","config","destination","setDestination","find","space","setMessage","hasReferences","setHasReferences","isDuplicating","setIsDuplicating","isGathering","setIsGathering","progress","setProgress","initialRefs","initialPayload","forEach","refs","updatePayloadStatuses","payloadActual","name","payloadIds","_ref","destinationClient","withConfig","projectId","destinationData","updatedPayload","existingDoc","_updatedAt","Date","handleCheckbox","handleReferences","docIds","payloadDocs","draftDocs","draftDocsIds","_ref2","payloadShaped","hasDraft","handleDuplicate","assetsCount","_ref3","currentProgress","transactionDocs","svgMaps","fetchDoc","typeIsFile","isSanityFileAsset","downloadUrl","url","downloadConfig","headers","Authorization","then","res","assetData","blob","filename","originalFilename","assetDoc","assets","upload","extension","old","new","result","resolve","reject","payloadIncludedDocs","mapLimit","default","asyncify","err","console","error","Error","transactionDocsMapped","newRefValue","asset","refPath","path","dset","transaction","createOrReplace","commit","catch","details","description","handleChange","e","targeted","currentTarget","payloadCount","firstSvgIndex","findIndex","_ref4","selectedDocumentsCount","selectedAssetsCount","selectedTotal","destinationTitle","title","hasMultipleProjectIds","headingText","buttonText","React","useMemo","String","jsxs","Container","width","border","Stack","Fragment","borderBottom","flex","Label","Select","readOnly","paddingTop","paddingBottom","ArrowRightIcon","onChange","transform","transformOrigin","transition","boxSizing","paddingX","_ref5","index","schemaType","get","_type","align","Checkbox","checked","Preview","icon","SearchIcon","LaunchIcon","DuplicatorQuery","schemaTypes","getTypeNames","setValue","initialData","setInitialData","handleSubmit","preventDefault","registeredAndPublishedDocs","startsWith","Grid","columns","onSubmit","paddingRight","TextInput","fontFamily","event","placeholder","DuplicatorWrapper","inbound","setInbound","follow","setMode","inboundReferences","marginBottom","selected","SECRET_NAMESPACE","DEFAULT_CONFIG","tool","types","ResetSecret","handleClick","useCallback","delete","justify","paddingY","CrossDatasetDuplicatorContext","createContext","useCrossDatasetDuplicatorConfig","useContext","ConfigProvider","rest","Provider","renderDefault","secretConfigKeys","key","CrossDatasetDuplicator","loading","secrets","useSecrets","showSecretsPrompt","setShowSecretsPrompt","bearerToken","Spinner","SettingsView","namespace","keys","onClose","CrossDatasetDuplicatorAction","DuplicateToAction","draft","published","onComplete","dialogOpen","setDialogOpen","label","dialog","type","onHandle","CrossDatasetDuplicatorTool","crossDatasetDuplicatorTool","component","crossDatasetDuplicator","definePlugin","tools","prev","studio","components","layout","document","actions","_ref6"],"mappings":"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"}